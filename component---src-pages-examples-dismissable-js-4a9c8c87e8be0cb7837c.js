(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{155:function(e,n,a){"use strict";a.r(n);var t=a(0),r=a.n(t),c=a(160),o=a(162);function s(){return r.a.createElement(o.SnackbarProvider,{dismissable:!0},r.a.createElement(l,null))}var l=Object(o.wrapComponent)(function(e){var n=e.createSnackbar;return r.a.createElement("div",null,r.a.createElement("button",{onClick:function(){n({message:"Hello Snackbar!"})}},"Show Snackbar"))}),i=a(230),u=a.n(i),b=a(156);function m(){return r.a.createElement(c.a,{title:"Dismissable"},r.a.createElement("p",null,"Snackbar notifications will automatically disappear after the timeout has passed. They can also, however, be configured so that they can be manually dismissed before the timeout passes. This can be done in one of two ways:"),r.a.createElement("ul",null,r.a.createElement("li",null,"Setting the ",r.a.createElement("code",null,"dismissable")," prop on the"," ",r.a.createElement("code",null,"SnackbarManager")," (to make all snackbars dismissable)"),r.a.createElement("li",null,"Setting the ",r.a.createElement("code",null,"dismissable")," property on the passed snackbar object (to make only that snackbar dismissable)")),r.a.createElement(s,null),r.a.createElement(b.a,{src:u.a}))}a.d(n,"default",function(){return m})},156:function(e,n,a){"use strict";a.d(n,"a",function(){return s});var t=a(157),r=a.n(t),c=a(0),o=a.n(c);function s(e){var n=e.src,a=e.language;return o.a.createElement("pre",null,o.a.createElement("code",{className:"language-"+a,dangerouslySetInnerHTML:{__html:r()(n)}}))}s.defaultProps={language:"jsx"}},157:function(e,n,a){"use strict";var t=/["'&<>]/;e.exports=function(e){var n,a=""+e,r=t.exec(a);if(!r)return a;var c="",o=0,s=0;for(o=r.index;o<a.length;o++){switch(a.charCodeAt(o)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 39:n="&#39;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}s!==o&&(c+=a.substring(s,o)),s=o+1,c+=n}return s!==o?c+a.substring(s,o):c}},230:function(e,n){e.exports="import React from 'react';\n\nimport { SnackbarProvider, wrapComponent } from 'react-snackbar-alert';\n\nexport default function DismissableExample() {\n  return (\n    <SnackbarProvider dismissable={true}>\n      <Container />\n    </SnackbarProvider>\n  );\n}\n\nconst Container = wrapComponent(function({ createSnackbar }) {\n  function showSnackbar() {\n    createSnackbar({\n      message: 'Hello Snackbar!'\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={showSnackbar}>Show Snackbar</button>\n    </div>\n  );\n});\n"}}]);
//# sourceMappingURL=component---src-pages-examples-dismissable-js-4a9c8c87e8be0cb7837c.js.map